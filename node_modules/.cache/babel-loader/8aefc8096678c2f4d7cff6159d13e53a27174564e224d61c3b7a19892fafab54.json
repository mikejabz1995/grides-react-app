{"ast":null,"code":"\"use strict\";exports.isValid=isValid;var _index=require(\"./isDate.js\");var _index2=require(\"./toDate.js\");/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */function isValid(date){if(!(0,_index.isDate)(date)&&typeof date!==\"number\"){return false;}const _date=(0,_index2.toDate)(date);return!isNaN(Number(_date));}","map":{"version":3,"names":["exports","isValid","_index","require","_index2","date","isDate","_date","toDate","isNaN","Number"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/isValid.js"],"sourcesContent":["\"use strict\";\nexports.isValid = isValid;\nvar _index = require(\"./isDate.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid(date) {\n  if (!(0, _index.isDate)(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = (0, _index2.toDate)(date);\n  return !isNaN(Number(_date));\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,OAAO,CAAGA,OAAO,CACzB,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,aAAa,CAAC,CACnC,GAAI,CAAAC,OAAO,CAAGD,OAAO,CAAC,aAAa,CAAC,CAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,OAAOA,CAACI,IAAI,CAAE,CACrB,GAAI,CAAC,CAAC,CAAC,CAAEH,MAAM,CAACI,MAAM,EAAED,IAAI,CAAC,EAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,CAAE,CACzD,MAAO,MAAK,CACd,CACA,KAAM,CAAAE,KAAK,CAAG,CAAC,CAAC,CAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC,CACvC,MAAO,CAACI,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,CAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}