{"ast":null,"code":"\"use strict\";exports.setYear=setYear;var _index=require(\"./constructFrom.js\");var _index2=require(\"./toDate.js\");/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param year - The year of the new date\n *\n * @returns The new date with the year set\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */function setYear(date,year){const _date=(0,_index2.toDate)(date);// Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\nif(isNaN(+_date)){return(0,_index.constructFrom)(date,NaN);}_date.setFullYear(year);return _date;}","map":{"version":3,"names":["exports","setYear","_index","require","_index2","date","year","_date","toDate","isNaN","constructFrom","NaN","setFullYear"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/setYear.js"],"sourcesContent":["\"use strict\";\nexports.setYear = setYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param year - The year of the new date\n *\n * @returns The new date with the year set\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\nfunction setYear(date, year) {\n  const _date = (0, _index2.toDate)(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return (0, _index.constructFrom)(date, NaN);\n  }\n\n  _date.setFullYear(year);\n  return _date;\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,OAAO,CAAGA,OAAO,CACzB,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,oBAAoB,CAAC,CAC1C,GAAI,CAAAC,OAAO,CAAGD,OAAO,CAAC,aAAa,CAAC,CAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,OAAOA,CAACI,IAAI,CAAEC,IAAI,CAAE,CAC3B,KAAM,CAAAC,KAAK,CAAG,CAAC,CAAC,CAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC,CAEvC;AACA,GAAII,KAAK,CAAC,CAACF,KAAK,CAAC,CAAE,CACjB,MAAO,CAAC,CAAC,CAAEL,MAAM,CAACQ,aAAa,EAAEL,IAAI,CAAEM,GAAG,CAAC,CAC7C,CAEAJ,KAAK,CAACK,WAAW,CAACN,IAAI,CAAC,CACvB,MAAO,CAAAC,KAAK,CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}