{"ast":null,"code":"\"use strict\";exports.set=set;var _index=require(\"./constructFrom.js\");var _index2=require(\"./setMonth.js\");var _index3=require(\"./toDate.js\");/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */function set(date,values){let _date=(0,_index3.toDate)(date);// Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\nif(isNaN(+_date)){return(0,_index.constructFrom)(date,NaN);}if(values.year!=null){_date.setFullYear(values.year);}if(values.month!=null){_date=(0,_index2.setMonth)(_date,values.month);}if(values.date!=null){_date.setDate(values.date);}if(values.hours!=null){_date.setHours(values.hours);}if(values.minutes!=null){_date.setMinutes(values.minutes);}if(values.seconds!=null){_date.setSeconds(values.seconds);}if(values.milliseconds!=null){_date.setMilliseconds(values.milliseconds);}return _date;}","map":{"version":3,"names":["exports","set","_index","require","_index2","_index3","date","values","_date","toDate","isNaN","constructFrom","NaN","year","setFullYear","month","setMonth","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds"],"sources":["/Users/mikejabrhamdan/grides-react-app/src/node_modules/date-fns/set.js"],"sourcesContent":["\"use strict\";\nexports.set = set;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./setMonth.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nfunction set(date, values) {\n  let _date = (0, _index3.toDate)(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return (0, _index.constructFrom)(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = (0, _index2.setMonth)(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,GAAG,CAAGA,GAAG,CACjB,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,oBAAoB,CAAC,CAC1C,GAAI,CAAAC,OAAO,CAAGD,OAAO,CAAC,eAAe,CAAC,CACtC,GAAI,CAAAE,OAAO,CAAGF,OAAO,CAAC,aAAa,CAAC,CAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAAS,CAAAF,GAAGA,CAACK,IAAI,CAAEC,MAAM,CAAE,CACzB,GAAI,CAAAC,KAAK,CAAG,CAAC,CAAC,CAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC,CAErC;AACA,GAAII,KAAK,CAAC,CAACF,KAAK,CAAC,CAAE,CACjB,MAAO,CAAC,CAAC,CAAEN,MAAM,CAACS,aAAa,EAAEL,IAAI,CAAEM,GAAG,CAAC,CAC7C,CAEA,GAAIL,MAAM,CAACM,IAAI,EAAI,IAAI,CAAE,CACvBL,KAAK,CAACM,WAAW,CAACP,MAAM,CAACM,IAAI,CAAC,CAChC,CAEA,GAAIN,MAAM,CAACQ,KAAK,EAAI,IAAI,CAAE,CACxBP,KAAK,CAAG,CAAC,CAAC,CAAEJ,OAAO,CAACY,QAAQ,EAAER,KAAK,CAAED,MAAM,CAACQ,KAAK,CAAC,CACpD,CAEA,GAAIR,MAAM,CAACD,IAAI,EAAI,IAAI,CAAE,CACvBE,KAAK,CAACS,OAAO,CAACV,MAAM,CAACD,IAAI,CAAC,CAC5B,CAEA,GAAIC,MAAM,CAACW,KAAK,EAAI,IAAI,CAAE,CACxBV,KAAK,CAACW,QAAQ,CAACZ,MAAM,CAACW,KAAK,CAAC,CAC9B,CAEA,GAAIX,MAAM,CAACa,OAAO,EAAI,IAAI,CAAE,CAC1BZ,KAAK,CAACa,UAAU,CAACd,MAAM,CAACa,OAAO,CAAC,CAClC,CAEA,GAAIb,MAAM,CAACe,OAAO,EAAI,IAAI,CAAE,CAC1Bd,KAAK,CAACe,UAAU,CAAChB,MAAM,CAACe,OAAO,CAAC,CAClC,CAEA,GAAIf,MAAM,CAACiB,YAAY,EAAI,IAAI,CAAE,CAC/BhB,KAAK,CAACiB,eAAe,CAAClB,MAAM,CAACiB,YAAY,CAAC,CAC5C,CAEA,MAAO,CAAAhB,KAAK,CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}