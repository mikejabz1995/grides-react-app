{"ast":null,"code":"/*!\n* tabbable 6.2.0\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/ // NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors=['input:not([inert])','select:not([inert])','textarea:not([inert])','a[href]:not([inert])','button:not([inert])','[tabindex]:not(slot):not([inert])','audio[controls]:not([inert])','video[controls]:not([inert])','[contenteditable]:not([contenteditable=\"false\"]):not([inert])','details>summary:first-of-type:not([inert])','details:not([inert])'];var candidateSelector=/* #__PURE__ */candidateSelectors.join(',');var NoElement=typeof Element==='undefined';var matches=NoElement?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector;var getRootNode=!NoElement&&Element.prototype.getRootNode?function(element){var _element$getRootNode;return element===null||element===void 0?void 0:(_element$getRootNode=element.getRootNode)===null||_element$getRootNode===void 0?void 0:_element$getRootNode.call(element);}:function(element){return element===null||element===void 0?void 0:element.ownerDocument;};/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */var isInert=function isInert(node,lookUp){var _node$getAttribute;if(lookUp===void 0){lookUp=true;}// CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n//  JS API property; we have to check the attribute, which can either be empty or 'true';\n//  if it's `null` (not specified) or 'false', it's an active element\nvar inertAtt=node===null||node===void 0?void 0:(_node$getAttribute=node.getAttribute)===null||_node$getAttribute===void 0?void 0:_node$getAttribute.call(node,'inert');var inert=inertAtt===''||inertAtt==='true';// NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n//  if it weren't for `matches()` not being a function on shadow roots; the following\n//  code works for any kind of node\n// CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n//  so it likely would not support `:is([inert] *)` either...\nvar result=inert||lookUp&&node&&isInert(node.parentNode);// recursive\nreturn result;};/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */var isContentEditable=function isContentEditable(node){var _node$getAttribute2;// CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n//  to use the attribute directly to check for this, which can either be empty or 'true';\n//  if it's `null` (not specified) or 'false', it's a non-editable element\nvar attValue=node===null||node===void 0?void 0:(_node$getAttribute2=node.getAttribute)===null||_node$getAttribute2===void 0?void 0:_node$getAttribute2.call(node,'contenteditable');return attValue===''||attValue==='true';};/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */var getCandidates=function getCandidates(el,includeContainer,filter){// even if `includeContainer=false`, we still have to check it for inertness because\n//  if it's inert, all its children are inert\nif(isInert(el)){return[];}var candidates=Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));if(includeContainer&&matches.call(el,candidateSelector)){candidates.unshift(el);}candidates=candidates.filter(filter);return candidates;};/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */ /**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */ /**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */ /**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */ /**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */var getCandidatesIteratively=function getCandidatesIteratively(elements,includeContainer,options){var candidates=[];var elementsToCheck=Array.from(elements);while(elementsToCheck.length){var element=elementsToCheck.shift();if(isInert(element,false)){// no need to look up since we're drilling down\n// anything inside this container will also be inert\ncontinue;}if(element.tagName==='SLOT'){// add shadow dom slot scope (slot itself cannot be focusable)\nvar assigned=element.assignedElements();var content=assigned.length?assigned:element.children;var nestedCandidates=getCandidatesIteratively(content,true,options);if(options.flatten){candidates.push.apply(candidates,nestedCandidates);}else{candidates.push({scopeParent:element,candidates:nestedCandidates});}}else{// check candidate element\nvar validCandidate=matches.call(element,candidateSelector);if(validCandidate&&options.filter(element)&&(includeContainer||!elements.includes(element))){candidates.push(element);}// iterate over shadow content if possible\nvar shadowRoot=element.shadowRoot||// check for an undisclosed shadow\ntypeof options.getShadowRoot==='function'&&options.getShadowRoot(element);// no inert look up because we're already drilling down and checking for inertness\n//  on the way down, so all containers to this root node should have already been\n//  vetted as non-inert\nvar validShadowRoot=!isInert(shadowRoot,false)&&(!options.shadowRootFilter||options.shadowRootFilter(element));if(shadowRoot&&validShadowRoot){// add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n//  shadow exists, so look at light dom children as fallback BUT create a scope for any\n//  child candidates found because they're likely slotted elements (elements that are\n//  children of the web component element (which has the shadow), in the light dom, but\n//  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n//  _after_ we return from this recursive call\nvar _nestedCandidates=getCandidatesIteratively(shadowRoot===true?element.children:shadowRoot.children,true,options);if(options.flatten){candidates.push.apply(candidates,_nestedCandidates);}else{candidates.push({scopeParent:element,candidates:_nestedCandidates});}}else{// there's not shadow so just dig into the element's (light dom) children\n//  __without__ giving the element special scope treatment\nelementsToCheck.unshift.apply(elementsToCheck,element.children);}}}return candidates;};/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */var hasTabIndex=function hasTabIndex(node){return!isNaN(parseInt(node.getAttribute('tabindex'),10));};/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */var getTabIndex=function getTabIndex(node){if(!node){throw new Error('No node provided');}if(node.tabIndex<0){// in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n// `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n// yet they are still part of the regular tab order; in FF, they get a default\n// `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n// order, consider their tab index to be 0.\n// Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n// so if they don't have a tabindex attribute specifically set, assume it's 0.\nif((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName)||isContentEditable(node))&&!hasTabIndex(node)){return 0;}}return node.tabIndex;};/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */var getSortOrderTabIndex=function getSortOrderTabIndex(node,isScope){var tabIndex=getTabIndex(node);if(tabIndex<0&&isScope&&!hasTabIndex(node)){return 0;}return tabIndex;};var sortOrderedTabbables=function sortOrderedTabbables(a,b){return a.tabIndex===b.tabIndex?a.documentOrder-b.documentOrder:a.tabIndex-b.tabIndex;};var isInput=function isInput(node){return node.tagName==='INPUT';};var isHiddenInput=function isHiddenInput(node){return isInput(node)&&node.type==='hidden';};var isDetailsWithSummary=function isDetailsWithSummary(node){var r=node.tagName==='DETAILS'&&Array.prototype.slice.apply(node.children).some(function(child){return child.tagName==='SUMMARY';});return r;};var getCheckedRadio=function getCheckedRadio(nodes,form){for(var i=0;i<nodes.length;i++){if(nodes[i].checked&&nodes[i].form===form){return nodes[i];}}};var isTabbableRadio=function isTabbableRadio(node){if(!node.name){return true;}var radioScope=node.form||getRootNode(node);var queryRadios=function queryRadios(name){return radioScope.querySelectorAll('input[type=\"radio\"][name=\"'+name+'\"]');};var radioSet;if(typeof window!=='undefined'&&typeof window.CSS!=='undefined'&&typeof window.CSS.escape==='function'){radioSet=queryRadios(window.CSS.escape(node.name));}else{try{radioSet=queryRadios(node.name);}catch(err){// eslint-disable-next-line no-console\nconsole.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',err.message);return false;}}var checked=getCheckedRadio(radioSet,node.form);return!checked||checked===node;};var isRadio=function isRadio(node){return isInput(node)&&node.type==='radio';};var isNonTabbableRadio=function isNonTabbableRadio(node){return isRadio(node)&&!isTabbableRadio(node);};// determines if a node is ultimately attached to the window's document\nvar isNodeAttached=function isNodeAttached(node){var _nodeRoot;// The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n//  (but NOT _the_ document; see second 'If' comment below for more).\n// If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n//  is attached, and the one we need to check if it's in the document or not (because the\n//  shadow, and all nodes it contains, is never considered in the document since shadows\n//  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n//  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n//  visibility, including all the nodes it contains). The host could be any normal node,\n//  or a custom element (i.e. web component). Either way, that's the one that is considered\n//  part of the document, not the shadow root, nor any of its children (i.e. the node being\n//  tested).\n// To further complicate things, we have to look all the way up until we find a shadow HOST\n//  that is attached (or find none) because the node might be in nested shadows...\n// If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n//  document (per the docs) and while it's a Document-type object, that document does not\n//  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n//  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n//  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n//  node is actually detached.\n// NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n//  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n//  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n//  `ownerDocument` will be `null`, hence the optional chaining on it.\nvar nodeRoot=node&&getRootNode(node);var nodeRootHost=(_nodeRoot=nodeRoot)===null||_nodeRoot===void 0?void 0:_nodeRoot.host;// in some cases, a detached node will return itself as the root instead of a document or\n//  shadow root object, in which case, we shouldn't try to look further up the host chain\nvar attached=false;if(nodeRoot&&nodeRoot!==node){var _nodeRootHost,_nodeRootHost$ownerDo,_node$ownerDocument;attached=!!((_nodeRootHost=nodeRootHost)!==null&&_nodeRootHost!==void 0&&(_nodeRootHost$ownerDo=_nodeRootHost.ownerDocument)!==null&&_nodeRootHost$ownerDo!==void 0&&_nodeRootHost$ownerDo.contains(nodeRootHost)||node!==null&&node!==void 0&&(_node$ownerDocument=node.ownerDocument)!==null&&_node$ownerDocument!==void 0&&_node$ownerDocument.contains(node));while(!attached&&nodeRootHost){var _nodeRoot2,_nodeRootHost2,_nodeRootHost2$ownerD;// since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n//  which means we need to get the host's host and check if that parent host is contained\n//  in (i.e. attached to) the document\nnodeRoot=getRootNode(nodeRootHost);nodeRootHost=(_nodeRoot2=nodeRoot)===null||_nodeRoot2===void 0?void 0:_nodeRoot2.host;attached=!!((_nodeRootHost2=nodeRootHost)!==null&&_nodeRootHost2!==void 0&&(_nodeRootHost2$ownerD=_nodeRootHost2.ownerDocument)!==null&&_nodeRootHost2$ownerD!==void 0&&_nodeRootHost2$ownerD.contains(nodeRootHost));}}return attached;};var isZeroArea=function isZeroArea(node){var _node$getBoundingClie=node.getBoundingClientRect(),width=_node$getBoundingClie.width,height=_node$getBoundingClie.height;return width===0&&height===0;};var isHidden=function isHidden(node,_ref){var displayCheck=_ref.displayCheck,getShadowRoot=_ref.getShadowRoot;// NOTE: visibility will be `undefined` if node is detached from the document\n//  (see notes about this further down), which means we will consider it visible\n//  (this is legacy behavior from a very long way back)\n// NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n//  _visibility_ check, not a _display_ check\nif(getComputedStyle(node).visibility==='hidden'){return true;}var isDirectSummary=matches.call(node,'details>summary:first-of-type');var nodeUnderDetails=isDirectSummary?node.parentElement:node;if(matches.call(nodeUnderDetails,'details:not([open]) *')){return true;}if(!displayCheck||displayCheck==='full'||displayCheck==='legacy-full'){if(typeof getShadowRoot==='function'){// figure out if we should consider the node to be in an undisclosed shadow and use the\n//  'non-zero-area' fallback\nvar originalNode=node;while(node){var parentElement=node.parentElement;var rootNode=getRootNode(node);if(parentElement&&!parentElement.shadowRoot&&getShadowRoot(parentElement)===true// check if there's an undisclosed shadow\n){// node has an undisclosed shadow which means we can only treat it as a black box, so we\n//  fall back to a non-zero-area test\nreturn isZeroArea(node);}else if(node.assignedSlot){// iterate up slot\nnode=node.assignedSlot;}else if(!parentElement&&rootNode!==node.ownerDocument){// cross shadow boundary\nnode=rootNode.host;}else{// iterate up normal dom\nnode=parentElement;}}node=originalNode;}// else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n//  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n//  it might be a falsy value, which means shadow DOM support is disabled\n// Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n//  now we can just test to see if it would normally be visible or not, provided it's\n//  attached to the main document.\n// NOTE: We must consider case where node is inside a shadow DOM and given directly to\n//  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\nif(isNodeAttached(node)){// this works wherever the node is: if there's at least one client rect, it's\n//  somehow displayed; it also covers the CSS 'display: contents' case where the\n//  node itself is hidden in place of its contents; and there's no need to search\n//  up the hierarchy either\nreturn!node.getClientRects().length;}// Else, the node isn't attached to the document, which means the `getClientRects()`\n//  API will __always__ return zero rects (this can happen, for example, if React\n//  is used to render nodes onto a detached tree, as confirmed in this thread:\n//  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n//\n// It also means that even window.getComputedStyle(node).display will return `undefined`\n//  because styles are only computed for nodes that are in the document.\n//\n// NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n//  somehow. Though it was never stated officially, anyone who has ever used tabbable\n//  APIs on nodes in detached containers has actually implicitly used tabbable in what\n//  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n//  considering __everything__ to be visible because of the innability to determine styles.\n//\n// v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n//  nodes as visible with the 'none' fallback.__\nif(displayCheck!=='legacy-full'){return true;// hidden\n}// else, fallback to 'none' mode and consider the node visible\n}else if(displayCheck==='non-zero-area'){// NOTE: Even though this tests that the node's client rect is non-zero to determine\n//  whether it's displayed, and that a detached node will __always__ have a zero-area\n//  client rect, we don't special-case for whether the node is attached or not. In\n//  this mode, we do want to consider nodes that have a zero area to be hidden at all\n//  times, and that includes attached or not.\nreturn isZeroArea(node);}// visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n//  it's visible\nreturn false;};// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset=function isDisabledFromFieldset(node){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)){var parentNode=node.parentElement;// check if `node` is contained in a disabled <fieldset>\nwhile(parentNode){if(parentNode.tagName==='FIELDSET'&&parentNode.disabled){// look for the first <legend> among the children of the disabled <fieldset>\nfor(var i=0;i<parentNode.children.length;i++){var child=parentNode.children.item(i);// when the first <legend> (in document order) is found\nif(child.tagName==='LEGEND'){// if its parent <fieldset> is not nested in another disabled <fieldset>,\n// return whether `node` is a descendant of its first <legend>\nreturn matches.call(parentNode,'fieldset[disabled] *')?true:!child.contains(node);}}// the disabled <fieldset> containing `node` has no <legend>\nreturn true;}parentNode=parentNode.parentElement;}}// else, node's tabbable/focusable state should not be affected by a fieldset's\n//  enabled/disabled state\nreturn false;};var isNodeMatchingSelectorFocusable=function isNodeMatchingSelectorFocusable(options,node){if(node.disabled||// we must do an inert look up to filter out any elements inside an inert ancestor\n//  because we're limited in the type of selectors we can use in JSDom (see related\n//  note related to `candidateSelectors`)\nisInert(node)||isHiddenInput(node)||isHidden(node,options)||// For a details element with a summary, the summary element gets the focus\nisDetailsWithSummary(node)||isDisabledFromFieldset(node)){return false;}return true;};var isNodeMatchingSelectorTabbable=function isNodeMatchingSelectorTabbable(options,node){if(isNonTabbableRadio(node)||getTabIndex(node)<0||!isNodeMatchingSelectorFocusable(options,node)){return false;}return true;};var isValidShadowRootTabbable=function isValidShadowRootTabbable(shadowHostNode){var tabIndex=parseInt(shadowHostNode.getAttribute('tabindex'),10);if(isNaN(tabIndex)||tabIndex>=0){return true;}// If a custom element has an explicit negative tabindex,\n// browsers will not allow tab targeting said element's children.\nreturn false;};/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */var sortByOrder=function sortByOrder(candidates){var regularTabbables=[];var orderedTabbables=[];candidates.forEach(function(item,i){var isScope=!!item.scopeParent;var element=isScope?item.scopeParent:item;var candidateTabindex=getSortOrderTabIndex(element,isScope);var elements=isScope?sortByOrder(item.candidates):element;if(candidateTabindex===0){isScope?regularTabbables.push.apply(regularTabbables,elements):regularTabbables.push(element);}else{orderedTabbables.push({documentOrder:i,tabIndex:candidateTabindex,item:item,isScope:isScope,content:elements});}});return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc,sortable){sortable.isScope?acc.push.apply(acc,sortable.content):acc.push(sortable.content);return acc;},[]).concat(regularTabbables);};var tabbable=function tabbable(container,options){options=options||{};var candidates;if(options.getShadowRoot){candidates=getCandidatesIteratively([container],options.includeContainer,{filter:isNodeMatchingSelectorTabbable.bind(null,options),flatten:false,getShadowRoot:options.getShadowRoot,shadowRootFilter:isValidShadowRootTabbable});}else{candidates=getCandidates(container,options.includeContainer,isNodeMatchingSelectorTabbable.bind(null,options));}return sortByOrder(candidates);};var focusable=function focusable(container,options){options=options||{};var candidates;if(options.getShadowRoot){candidates=getCandidatesIteratively([container],options.includeContainer,{filter:isNodeMatchingSelectorFocusable.bind(null,options),flatten:true,getShadowRoot:options.getShadowRoot});}else{candidates=getCandidates(container,options.includeContainer,isNodeMatchingSelectorFocusable.bind(null,options));}return candidates;};var isTabbable=function isTabbable(node,options){options=options||{};if(!node){throw new Error('No node provided');}if(matches.call(node,candidateSelector)===false){return false;}return isNodeMatchingSelectorTabbable(options,node);};var focusableCandidateSelector=/* #__PURE__ */candidateSelectors.concat('iframe').join(',');var isFocusable=function isFocusable(node,options){options=options||{};if(!node){throw new Error('No node provided');}if(matches.call(node,focusableCandidateSelector)===false){return false;}return isNodeMatchingSelectorFocusable(options,node);};export{focusable,getTabIndex,isFocusable,isTabbable,tabbable};","map":{"version":3,"names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","call","ownerDocument","isInert","node","lookUp","_node$getAttribute","inertAtt","getAttribute","inert","result","parentNode","isContentEditable","_node$getAttribute2","attValue","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","content","children","nestedCandidates","flatten","push","scopeParent","validCandidate","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","hasTabIndex","isNaN","parseInt","getTabIndex","Error","tabIndex","test","getSortOrderTabIndex","isScope","sortOrderedTabbables","a","b","documentOrder","isInput","isHiddenInput","type","isDetailsWithSummary","r","some","child","getCheckedRadio","nodes","form","i","checked","isTabbableRadio","name","radioScope","queryRadios","radioSet","window","CSS","escape","err","console","error","message","isRadio","isNonTabbableRadio","isNodeAttached","_nodeRoot","nodeRoot","nodeRootHost","host","attached","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","contains","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","disabled","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","sort","reduce","acc","sortable","concat","tabbable","container","bind","focusable","isTabbable","focusableCandidateSelector","isFocusable"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/tabbable/src/index.js"],"sourcesContent":["// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nconst hasTabIndex = function (node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nconst getTabIndex = function (node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if (\n      (/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      !hasTabIndex(node)\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nconst getSortOrderTabIndex = function (node, isScope) {\n  const tabIndex = getTabIndex(node);\n\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n\n  return tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabIndex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getSortOrderTabIndex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorTabbable.bind(null, options),\n        flatten: false,\n        getShadowRoot: options.getShadowRoot,\n        shadowRootFilter: isValidShadowRootTabbable,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorFocusable.bind(null, options),\n        flatten: true,\n        getShadowRoot: options.getShadowRoot,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable, getTabIndex };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}