{"ast":null,"code":"var _jsxFileName = \"/Users/mikejabrhamdan/grides-react-app/src/components/Step2.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport moment from 'moment';\nimport './Step2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\nconst localStorageKey = 'vehicleDescriptions';\nfunction saveVehicleDescription(vehicleId, description, colorTitle) {\n  const existingEntries = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  existingEntries[vehicleId] = {\n    description,\n    colorTitle\n  };\n  localStorage.setItem(localStorageKey, JSON.stringify(existingEntries));\n}\nfunction getVehicleDescription(vehicleId) {\n  const existingEntries = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  return existingEntries[vehicleId];\n}\nconst Step2 = () => {\n  _s();\n  const [vehicles, setVehicles] = useState([]);\n  useEffect(() => {\n    const fetchVehiclesAndGenerateDescriptions = async () => {\n      // Fetch vehicle data\n      const vehicleData = await fetchVehicles(); // This function needs to be implemented to fetch your vehicle data\n\n      const configuration = new Configuration({\n        apiKey: process.env.ajaQGkkczXx768Re48wDT3BlbkFJTquilJH3Di5uFcSGnQ5B\n      });\n      const openai = new OpenAIApi(configuration);\n      const vehiclesWithDescriptions = await Promise.all(vehicleData.map(async vehicle => {\n        // Check if we already have a description and color title for this vehicle\n        const storedDescription = getVehicleDescription(vehicle.id);\n        if (storedDescription) {\n          return {\n            ...vehicle,\n            ...storedDescription\n          };\n        }\n\n        // Generate description\n        const descriptionPrompt = `Generate a unique short description for a vehicle with the following attributes: Year: ${vehicle.year}, Brand: ${vehicle.brand}, Model: ${vehicle.model}, Color: ${vehicle.color}.`;\n        const descriptionResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: descriptionPrompt,\n          max_tokens: 60\n        });\n\n        // Generate color title\n        const colorPrompt = `Generate a descriptive color title for the color ${vehicle.color}.`;\n        const colorResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: colorPrompt,\n          max_tokens: 10\n        });\n        const description = descriptionResponse.data.choices[0].text.trim();\n        const colorTitle = colorResponse.data.choices[0].text.trim();\n\n        // Save the generated descriptions for future use\n        saveVehicleDescription(vehicle.id, description, colorTitle);\n        return {\n          ...vehicle,\n          description,\n          colorTitle\n        };\n      }));\n      setVehicles(vehiclesWithDescriptions);\n    };\n    fetchVehiclesAndGenerateDescriptions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: vehicles.map((vehicle, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [vehicle.brand, \" \", vehicle.model, \" (\", vehicle.colorTitle || vehicle.color, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: vehicle.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Step2, \"F+3Wwuoj92cy/fYg4DPIUSmtheM=\");\n_c = Step2;\nexport default Step2;\nasync function fetchVehicles() {\n  // Your implementation to fetch vehicles from your API\n}\nvar _c;\n$RefreshReg$(_c, \"Step2\");","map":{"version":3,"names":["React","useState","useEffect","axios","moment","jsxDEV","_jsxDEV","Configuration","OpenAIApi","require","localStorageKey","saveVehicleDescription","vehicleId","description","colorTitle","existingEntries","JSON","parse","localStorage","getItem","setItem","stringify","getVehicleDescription","Step2","_s","vehicles","setVehicles","fetchVehiclesAndGenerateDescriptions","vehicleData","fetchVehicles","configuration","apiKey","process","env","ajaQGkkczXx768Re48wDT3BlbkFJTquilJH3Di5uFcSGnQ5B","openai","vehiclesWithDescriptions","Promise","all","map","vehicle","storedDescription","id","descriptionPrompt","year","brand","model","color","descriptionResponse","createCompletion","prompt","max_tokens","colorPrompt","colorResponse","data","choices","text","trim","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mikejabrhamdan/grides-react-app/src/components/Step2.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport moment from 'moment';\nimport './Step2.css';\n\nconst { Configuration, OpenAIApi } = require(\"openai\");\n\nconst localStorageKey = 'vehicleDescriptions';\n\nfunction saveVehicleDescription(vehicleId, description, colorTitle) {\n  const existingEntries = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  existingEntries[vehicleId] = { description, colorTitle };\n  localStorage.setItem(localStorageKey, JSON.stringify(existingEntries));\n}\n\nfunction getVehicleDescription(vehicleId) {\n  const existingEntries = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  return existingEntries[vehicleId];\n}\n\nconst Step2 = () => {\n  const [vehicles, setVehicles] = useState([]);\n\n  useEffect(() => {\n    const fetchVehiclesAndGenerateDescriptions = async () => {\n      // Fetch vehicle data\n      const vehicleData = await fetchVehicles(); // This function needs to be implemented to fetch your vehicle data\n\n      const configuration = new Configuration({\n        apiKey: process.env.ajaQGkkczXx768Re48wDT3BlbkFJTquilJH3Di5uFcSGnQ5B\n        ,\n      });\n      const openai = new OpenAIApi(configuration);\n\n      const vehiclesWithDescriptions = await Promise.all(vehicleData.map(async (vehicle) => {\n        // Check if we already have a description and color title for this vehicle\n        const storedDescription = getVehicleDescription(vehicle.id);\n        if (storedDescription) {\n          return { ...vehicle, ...storedDescription };\n        }\n\n        // Generate description\n        const descriptionPrompt = `Generate a unique short description for a vehicle with the following attributes: Year: ${vehicle.year}, Brand: ${vehicle.brand}, Model: ${vehicle.model}, Color: ${vehicle.color}.`;\n        const descriptionResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: descriptionPrompt,\n          max_tokens: 60,\n        });\n\n        // Generate color title\n        const colorPrompt = `Generate a descriptive color title for the color ${vehicle.color}.`;\n        const colorResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: colorPrompt,\n          max_tokens: 10,\n        });\n\n        const description = descriptionResponse.data.choices[0].text.trim();\n        const colorTitle = colorResponse.data.choices[0].text.trim();\n\n        // Save the generated descriptions for future use\n        saveVehicleDescription(vehicle.id, description, colorTitle);\n\n        return {\n          ...vehicle,\n          description,\n          colorTitle,\n        };\n      }));\n\n      setVehicles(vehiclesWithDescriptions);\n    };\n\n    fetchVehiclesAndGenerateDescriptions();\n  }, []);\n\n  return (\n    <div>\n      {vehicles.map((vehicle, index) => (\n        <div key={index}>\n          <h2>{vehicle.brand} {vehicle.model} ({vehicle.colorTitle || vehicle.color})</h2>\n          <p>{vehicle.description}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Step2;\n\nasync function fetchVehicles() {\n  // Your implementation to fetch vehicles from your API\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}