{"ast":null,"code":"\"use strict\";exports.buildLocalizeFn=buildLocalizeFn;/* eslint-disable no-unused-vars */ /**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */ /**\n * The map of localized values for each width.\n */ /**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */ /**\n * Converts the unit value to the tuple of values.\n */ /**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */ /**\n * The tuple of localized quarter values. The first element represents Q1.\n */ /**\n * The tuple of localized day values. The first element represents Sunday.\n */ /**\n * The tuple of localized month values. The first element represents January.\n */function buildLocalizeFn(args){return(value,options)=>{const context=options!==null&&options!==void 0&&options.context?String(options.context):\"standalone\";let valuesArray;if(context===\"formatting\"&&args.formattingValues){const defaultWidth=args.defaultFormattingWidth||args.defaultWidth;const width=options!==null&&options!==void 0&&options.width?String(options.width):defaultWidth;valuesArray=args.formattingValues[width]||args.formattingValues[defaultWidth];}else{const defaultWidth=args.defaultWidth;const width=options!==null&&options!==void 0&&options.width?String(options.width):args.defaultWidth;valuesArray=args.values[width]||args.values[defaultWidth];}const index=args.argumentCallback?args.argumentCallback(value):value;// @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\nreturn valuesArray[index];};}","map":{"version":3,"names":["exports","buildLocalizeFn","args","value","options","context","String","valuesArray","formattingValues","defaultWidth","defaultFormattingWidth","width","values","index","argumentCallback"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/locale/_lib/buildLocalizeFn.js"],"sourcesContent":["\"use strict\";\nexports.buildLocalizeFn = buildLocalizeFn; /* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nfunction buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,eAAe,CAAGA,eAAe,CAAE,oCAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAPA,CASA;AACA;AACA,GAFA,CAIA;AACA;AACA;AACA,GAHA,CAKA;AACA;AACA,GAFA,CAIA;AACA;AACA;AACA,GAHA,CAKA;AACA;AACA,GAFA,CAIA;AACA;AACA,GAFA,CAIA;AACA;AACA,GAEA,QAAS,CAAAA,eAAeA,CAACC,IAAI,CAAE,CAC7B,MAAO,CAACC,KAAK,CAAEC,OAAO,GAAK,CACzB,KAAM,CAAAC,OAAO,CAAGD,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEC,OAAO,CAAGC,MAAM,CAACF,OAAO,CAACC,OAAO,CAAC,CAAG,YAAY,CAEzE,GAAI,CAAAE,WAAW,CACf,GAAIF,OAAO,GAAK,YAAY,EAAIH,IAAI,CAACM,gBAAgB,CAAE,CACrD,KAAM,CAAAC,YAAY,CAAGP,IAAI,CAACQ,sBAAsB,EAAIR,IAAI,CAACO,YAAY,CACrE,KAAM,CAAAE,KAAK,CAAGP,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEO,KAAK,CAAGL,MAAM,CAACF,OAAO,CAACO,KAAK,CAAC,CAAGF,YAAY,CAEnEF,WAAW,CACTL,IAAI,CAACM,gBAAgB,CAACG,KAAK,CAAC,EAAIT,IAAI,CAACM,gBAAgB,CAACC,YAAY,CAAC,CACvE,CAAC,IAAM,CACL,KAAM,CAAAA,YAAY,CAAGP,IAAI,CAACO,YAAY,CACtC,KAAM,CAAAE,KAAK,CAAGP,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEO,KAAK,CAAGL,MAAM,CAACF,OAAO,CAACO,KAAK,CAAC,CAAGT,IAAI,CAACO,YAAY,CAExEF,WAAW,CAAGL,IAAI,CAACU,MAAM,CAACD,KAAK,CAAC,EAAIT,IAAI,CAACU,MAAM,CAACH,YAAY,CAAC,CAC/D,CACA,KAAM,CAAAI,KAAK,CAAGX,IAAI,CAACY,gBAAgB,CAAGZ,IAAI,CAACY,gBAAgB,CAACX,KAAK,CAAC,CAAGA,KAAK,CAE1E;AACA,MAAO,CAAAI,WAAW,CAACM,KAAK,CAAC,CAC3B,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}