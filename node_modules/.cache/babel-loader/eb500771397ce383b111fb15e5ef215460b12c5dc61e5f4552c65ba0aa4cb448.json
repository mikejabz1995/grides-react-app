{"ast":null,"code":"\"use strict\";exports.addMonths=addMonths;var _index=require(\"./toDate.js\");var _index2=require(\"./constructFrom.js\");/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */function addMonths(date,amount){const _date=(0,_index.toDate)(date);if(isNaN(amount))return(0,_index2.constructFrom)(date,NaN);if(!amount){// If 0 months, no-op to avoid changing times in the hour before end of DST\nreturn _date;}const dayOfMonth=_date.getDate();// The JS Date object supports date math by accepting out-of-bounds values for\n// month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n// new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n// want except that dates will wrap around the end of a month, meaning that\n// new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n// we'll default to the end of the desired month by adding 1 to the desired\n// month and using a date of 0 to back up one day to the end of the desired\n// month.\nconst endOfDesiredMonth=(0,_index2.constructFrom)(date,_date.getTime());endOfDesiredMonth.setMonth(_date.getMonth()+amount+1,0);const daysInMonth=endOfDesiredMonth.getDate();if(dayOfMonth>=daysInMonth){// If we're already at the end of the month, then this is the correct date\n// and we're done.\nreturn endOfDesiredMonth;}else{// Otherwise, we now know that setting the original day-of-month value won't\n// cause an overflow, so set the desired day-of-month. Note that we can't\n// just set the date of `endOfDesiredMonth` because that object may have had\n// its time changed in the unusual case where where a DST transition was on\n// the last day of the month and its local time was in the hour skipped or\n// repeated next to a DST transition.  So we use `date` instead which is\n// guaranteed to still have the original time.\n_date.setFullYear(endOfDesiredMonth.getFullYear(),endOfDesiredMonth.getMonth(),dayOfMonth);return _date;}}","map":{"version":3,"names":["exports","addMonths","_index","require","_index2","date","amount","_date","toDate","isNaN","constructFrom","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear"],"sources":["/Users/mikejabrhamdan/grides-react-app/src/node_modules/date-fns/addMonths.js"],"sourcesContent":["\"use strict\";\nexports.addMonths = addMonths;\nvar _index = require(\"./toDate.js\");\nvar _index2 = require(\"./constructFrom.js\");\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nfunction addMonths(date, amount) {\n  const _date = (0, _index.toDate)(date);\n  if (isNaN(amount)) return (0, _index2.constructFrom)(date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = (0, _index2.constructFrom)(date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,SAAS,CAAGA,SAAS,CAC7B,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,aAAa,CAAC,CACnC,GAAI,CAAAC,OAAO,CAAGD,OAAO,CAAC,oBAAoB,CAAC,CAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,SAASA,CAACI,IAAI,CAAEC,MAAM,CAAE,CAC/B,KAAM,CAAAC,KAAK,CAAG,CAAC,CAAC,CAAEL,MAAM,CAACM,MAAM,EAAEH,IAAI,CAAC,CACtC,GAAII,KAAK,CAACH,MAAM,CAAC,CAAE,MAAO,CAAC,CAAC,CAAEF,OAAO,CAACM,aAAa,EAAEL,IAAI,CAAEM,GAAG,CAAC,CAC/D,GAAI,CAACL,MAAM,CAAE,CACX;AACA,MAAO,CAAAC,KAAK,CACd,CACA,KAAM,CAAAK,UAAU,CAAGL,KAAK,CAACM,OAAO,CAAC,CAAC,CAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAC,iBAAiB,CAAG,CAAC,CAAC,CAAEV,OAAO,CAACM,aAAa,EAAEL,IAAI,CAAEE,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC,CAC3ED,iBAAiB,CAACE,QAAQ,CAACT,KAAK,CAACU,QAAQ,CAAC,CAAC,CAAGX,MAAM,CAAG,CAAC,CAAE,CAAC,CAAC,CAC5D,KAAM,CAAAY,WAAW,CAAGJ,iBAAiB,CAACD,OAAO,CAAC,CAAC,CAC/C,GAAID,UAAU,EAAIM,WAAW,CAAE,CAC7B;AACA;AACA,MAAO,CAAAJ,iBAAiB,CAC1B,CAAC,IAAM,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,KAAK,CAACY,WAAW,CACfL,iBAAiB,CAACM,WAAW,CAAC,CAAC,CAC/BN,iBAAiB,CAACG,QAAQ,CAAC,CAAC,CAC5BL,UACF,CAAC,CACD,MAAO,CAAAL,KAAK,CACd,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}