{"ast":null,"code":"\"use strict\";exports.transpose=transpose;var _index=require(\"./constructFrom.js\");/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam DateInputType - The input `Date` type derived from the passed argument.\n * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.\n *\n * @param fromDate - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */function transpose(fromDate,constructor){const date=constructor instanceof Date?(0,_index.constructFrom)(constructor,0):new constructor(0);date.setFullYear(fromDate.getFullYear(),fromDate.getMonth(),fromDate.getDate());date.setHours(fromDate.getHours(),fromDate.getMinutes(),fromDate.getSeconds(),fromDate.getMilliseconds());return date;}","map":{"version":3,"names":["exports","transpose","_index","require","fromDate","constructor","date","Date","constructFrom","setFullYear","getFullYear","getMonth","getDate","setHours","getHours","getMinutes","getSeconds","getMilliseconds"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/transpose.js"],"sourcesContent":["\"use strict\";\nexports.transpose = transpose;\nvar _index = require(\"./constructFrom.js\");\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam DateInputType - The input `Date` type derived from the passed argument.\n * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.\n *\n * @param fromDate - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nfunction transpose(fromDate, constructor) {\n  const date =\n    constructor instanceof Date\n      ? (0, _index.constructFrom)(constructor, 0)\n      : new constructor(0);\n  date.setFullYear(\n    fromDate.getFullYear(),\n    fromDate.getMonth(),\n    fromDate.getDate(),\n  );\n  date.setHours(\n    fromDate.getHours(),\n    fromDate.getMinutes(),\n    fromDate.getSeconds(),\n    fromDate.getMilliseconds(),\n  );\n  return date;\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,SAAS,CAAGA,SAAS,CAC7B,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,oBAAoB,CAAC,CAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,SAASA,CAACG,QAAQ,CAAEC,WAAW,CAAE,CACxC,KAAM,CAAAC,IAAI,CACRD,WAAW,WAAY,CAAAE,IAAI,CACvB,CAAC,CAAC,CAAEL,MAAM,CAACM,aAAa,EAAEH,WAAW,CAAE,CAAC,CAAC,CACzC,GAAI,CAAAA,WAAW,CAAC,CAAC,CAAC,CACxBC,IAAI,CAACG,WAAW,CACdL,QAAQ,CAACM,WAAW,CAAC,CAAC,CACtBN,QAAQ,CAACO,QAAQ,CAAC,CAAC,CACnBP,QAAQ,CAACQ,OAAO,CAAC,CACnB,CAAC,CACDN,IAAI,CAACO,QAAQ,CACXT,QAAQ,CAACU,QAAQ,CAAC,CAAC,CACnBV,QAAQ,CAACW,UAAU,CAAC,CAAC,CACrBX,QAAQ,CAACY,UAAU,CAAC,CAAC,CACrBZ,QAAQ,CAACa,eAAe,CAAC,CAC3B,CAAC,CACD,MAAO,CAAAX,IAAI,CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}