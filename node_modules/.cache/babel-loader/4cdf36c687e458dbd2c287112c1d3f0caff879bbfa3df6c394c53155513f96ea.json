{"ast":null,"code":"\"use strict\";exports.isWithinInterval=isWithinInterval;var _index=require(\"./toDate.js\");/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */function isWithinInterval(date,interval){const time=+(0,_index.toDate)(date);const[startTime,endTime]=[+(0,_index.toDate)(interval.start),+(0,_index.toDate)(interval.end)].sort((a,b)=>a-b);return time>=startTime&&time<=endTime;}","map":{"version":3,"names":["exports","isWithinInterval","_index","require","date","interval","time","toDate","startTime","endTime","start","end","sort","a","b"],"sources":["/Users/mikejabrhamdan/grides-react-app/src/node_modules/date-fns/isWithinInterval.js"],"sourcesContent":["\"use strict\";\nexports.isWithinInterval = isWithinInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nfunction isWithinInterval(date, interval) {\n  const time = +(0, _index.toDate)(date);\n  const [startTime, endTime] = [\n    +(0, _index.toDate)(interval.start),\n    +(0, _index.toDate)(interval.end),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,gBAAgB,CAAGA,gBAAgB,CAC3C,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,aAAa,CAAC,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,gBAAgBA,CAACG,IAAI,CAAEC,QAAQ,CAAE,CACxC,KAAM,CAAAC,IAAI,CAAG,CAAC,CAAC,CAAC,CAAEJ,MAAM,CAACK,MAAM,EAAEH,IAAI,CAAC,CACtC,KAAM,CAACI,SAAS,CAAEC,OAAO,CAAC,CAAG,CAC3B,CAAC,CAAC,CAAC,CAAEP,MAAM,CAACK,MAAM,EAAEF,QAAQ,CAACK,KAAK,CAAC,CACnC,CAAC,CAAC,CAAC,CAAER,MAAM,CAACK,MAAM,EAAEF,QAAQ,CAACM,GAAG,CAAC,CAClC,CAACC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAC,CAEvB,MAAO,CAAAR,IAAI,EAAIE,SAAS,EAAIF,IAAI,EAAIG,OAAO,CAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}