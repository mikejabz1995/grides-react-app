{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport moment from 'moment';\nimport './Step2.css';\nimport { OpenAI } from \"openai\"; // Adjusted import\n\nconst localStorageKey = 'vehicleDescriptions';\n\n// Function to save vehicle description and color title to localStorage\nfunction saveVehicleDescription(vehicleId, description, colorTitle) {\n  const existingDescriptions = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  existingDescriptions[vehicleId] = {\n    description,\n    colorTitle\n  };\n  localStorage.setItem(localStorageKey, JSON.stringify(existingDescriptions));\n}\n\n// Function to get vehicle description and color title from localStorage\nfunction getVehicleDescription(vehicleId) {\n  const existingDescriptions = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  return existingDescriptions[vehicleId];\n}\nconst Step2 = () => {\n  _s();\n  const [vehicles, setVehicles] = useState([]);\n  useEffect(() => {\n    const fetchVehiclesAndGenerateDescriptions = async () => {\n      const vehicleData = await fetchVehicles(); // Ensure this function is correctly implemented\n\n      // Instantiate OpenAI client with your API key\n      const openai = new OpenAI(process.env.sk - ajaQGkkczXx768Re48wDT3BlbkFJTquilJH3Di5uFcSGnQ5B); // Adjusted instantiation\n\n      const vehiclesWithDescriptions = await Promise.all(vehicleData.map(async vehicle => {\n        const storedDescription = getVehicleDescription(vehicle.id);\n        if (storedDescription) {\n          return {\n            ...vehicle,\n            ...storedDescription\n          };\n        }\n\n        // Generate description and color title using OpenAI\n        const descriptionPrompt = `Generate a unique short description for a vehicle with the following attributes: Year: ${vehicle.year}, Brand: ${vehicle.brand}, Model: ${vehicle.model}, Color: ${vehicle.color}.`;\n        const colorPrompt = `Generate a descriptive color title for the color ${vehicle.color}.`;\n        const descriptionResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: descriptionPrompt,\n          max_tokens: 60\n        });\n        const colorResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: colorPrompt,\n          max_tokens: 10\n        });\n        const description = descriptionResponse.data.choices[0].text.trim();\n        const colorTitle = colorResponse.data.choices[0].text.trim();\n        saveVehicleDescription(vehicle.id, description, colorTitle);\n        return {\n          ...vehicle,\n          description,\n          colorTitle\n        };\n      }));\n      setVehicles(vehiclesWithDescriptions);\n    };\n    fetchVehiclesAndGenerateDescriptions();\n  }, []);\n\n  // The rendering logic remains the same\n};\n_s(Step2, \"F+3Wwuoj92cy/fYg4DPIUSmtheM=\");\n_c = Step2;\nexport default Step2;\nasync function fetchVehicles() {\n  // Your implementation to fetch vehicles from your API\n}\nvar _c;\n$RefreshReg$(_c, \"Step2\");","map":{"version":3,"names":["React","useState","useEffect","axios","moment","OpenAI","localStorageKey","saveVehicleDescription","vehicleId","description","colorTitle","existingDescriptions","JSON","parse","localStorage","getItem","setItem","stringify","getVehicleDescription","Step2","_s","vehicles","setVehicles","fetchVehiclesAndGenerateDescriptions","vehicleData","fetchVehicles","openai","process","env","sk","ajaQGkkczXx768Re48wDT3BlbkFJTquilJH3Di5uFcSGnQ5B","vehiclesWithDescriptions","Promise","all","map","vehicle","storedDescription","id","descriptionPrompt","year","brand","model","color","colorPrompt","descriptionResponse","createCompletion","prompt","max_tokens","colorResponse","data","choices","text","trim","_c","$RefreshReg$"],"sources":["/Users/mikejabrhamdan/grides-react-app/src/components/Step2.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport moment from 'moment';\nimport './Step2.css';\nimport { OpenAI } from \"openai\"; // Adjusted import\n\nconst localStorageKey = 'vehicleDescriptions';\n\n// Function to save vehicle description and color title to localStorage\nfunction saveVehicleDescription(vehicleId, description, colorTitle) {\n  const existingDescriptions = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  existingDescriptions[vehicleId] = { description, colorTitle };\n  localStorage.setItem(localStorageKey, JSON.stringify(existingDescriptions));\n}\n\n// Function to get vehicle description and color title from localStorage\nfunction getVehicleDescription(vehicleId) {\n  const existingDescriptions = JSON.parse(localStorage.getItem(localStorageKey)) || {};\n  return existingDescriptions[vehicleId];\n}\n\nconst Step2 = () => {\n  const [vehicles, setVehicles] = useState([]);\n\n  useEffect(() => {\n    const fetchVehiclesAndGenerateDescriptions = async () => {\n      const vehicleData = await fetchVehicles(); // Ensure this function is correctly implemented\n\n      // Instantiate OpenAI client with your API key\n      const openai = new OpenAI(process.env.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\n        ); // Adjusted instantiation\n\n      const vehiclesWithDescriptions = await Promise.all(vehicleData.map(async (vehicle) => {\n        const storedDescription = getVehicleDescription(vehicle.id);\n        if (storedDescription) {\n          return { ...vehicle, ...storedDescription };\n        }\n\n        // Generate description and color title using OpenAI\n        const descriptionPrompt = `Generate a unique short description for a vehicle with the following attributes: Year: ${vehicle.year}, Brand: ${vehicle.brand}, Model: ${vehicle.model}, Color: ${vehicle.color}.`;\n        const colorPrompt = `Generate a descriptive color title for the color ${vehicle.color}.`;\n\n        const descriptionResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: descriptionPrompt,\n          max_tokens: 60,\n        });\n\n        const colorResponse = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: colorPrompt,\n          max_tokens: 10,\n        });\n\n        const description = descriptionResponse.data.choices[0].text.trim();\n        const colorTitle = colorResponse.data.choices[0].text.trim();\n\n        saveVehicleDescription(vehicle.id, description, colorTitle);\n\n        return {\n          ...vehicle,\n          description,\n          colorTitle,\n        };\n      }));\n\n      setVehicles(vehiclesWithDescriptions);\n    };\n\n    fetchVehiclesAndGenerateDescriptions();\n  }, []);\n\n  // The rendering logic remains the same\n};\n\nexport default Step2;\n\nasync function fetchVehicles() {\n  // Your implementation to fetch vehicles from your API\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}