{"ast":null,"code":"\"use strict\";exports.min=min;var _index=require(\"./toDate.js\");/**\n * @name min\n * @category Common Helpers\n * @summary Returns the earliest of the given dates.\n *\n * @description\n * Returns the earliest of the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dates - The dates to compare\n *\n * @returns The earliest of the dates\n *\n * @example\n * // Which of these dates is the earliest?\n * const result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */function min(dates){let result;dates.forEach(dirtyDate=>{const date=(0,_index.toDate)(dirtyDate);if(!result||result>date||isNaN(+date)){result=date;}});return result||new Date(NaN);}","map":{"version":3,"names":["exports","min","_index","require","dates","result","forEach","dirtyDate","date","toDate","isNaN","Date","NaN"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/min.js"],"sourcesContent":["\"use strict\";\nexports.min = min;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name min\n * @category Common Helpers\n * @summary Returns the earliest of the given dates.\n *\n * @description\n * Returns the earliest of the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dates - The dates to compare\n *\n * @returns The earliest of the dates\n *\n * @example\n * // Which of these dates is the earliest?\n * const result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */\nfunction min(dates) {\n  let result;\n\n  dates.forEach((dirtyDate) => {\n    const date = (0, _index.toDate)(dirtyDate);\n    if (!result || result > date || isNaN(+date)) {\n      result = date;\n    }\n  });\n\n  return result || new Date(NaN);\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,GAAG,CAAGA,GAAG,CACjB,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,aAAa,CAAC,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,GAAGA,CAACG,KAAK,CAAE,CAClB,GAAI,CAAAC,MAAM,CAEVD,KAAK,CAACE,OAAO,CAAEC,SAAS,EAAK,CAC3B,KAAM,CAAAC,IAAI,CAAG,CAAC,CAAC,CAAEN,MAAM,CAACO,MAAM,EAAEF,SAAS,CAAC,CAC1C,GAAI,CAACF,MAAM,EAAIA,MAAM,CAAGG,IAAI,EAAIE,KAAK,CAAC,CAACF,IAAI,CAAC,CAAE,CAC5CH,MAAM,CAAGG,IAAI,CACf,CACF,CAAC,CAAC,CAEF,MAAO,CAAAH,MAAM,EAAI,GAAI,CAAAM,IAAI,CAACC,GAAG,CAAC,CAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}