{"ast":null,"code":"\"use strict\";exports.YearParser=void 0;var _Parser=require(\"../Parser.js\");var _utils=require(\"../utils.js\");// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends _Parser.Parser{constructor(){super(...arguments);this.priority=130;this.incompatibleTokens=[\"Y\",\"R\",\"u\",\"w\",\"I\",\"i\",\"e\",\"c\",\"t\",\"T\"];}parse(dateString,token,match){const valueCallback=year=>({year,isTwoDigitYear:token===\"yy\"});switch(token){case\"y\":return(0,_utils.mapValue)((0,_utils.parseNDigits)(4,dateString),valueCallback);case\"yo\":return(0,_utils.mapValue)(match.ordinalNumber(dateString,{unit:\"year\"}),valueCallback);default:return(0,_utils.mapValue)((0,_utils.parseNDigits)(token.length,dateString),valueCallback);}}validate(_date,value){return value.isTwoDigitYear||value.year>0;}set(date,flags,value){const currentYear=date.getFullYear();if(value.isTwoDigitYear){const normalizedTwoDigitYear=(0,_utils.normalizeTwoDigitYear)(value.year,currentYear);date.setFullYear(normalizedTwoDigitYear,0,1);date.setHours(0,0,0,0);return date;}const year=!(\"era\"in flags)||flags.era===1?value.year:1-value.year;date.setFullYear(year,0,1);date.setHours(0,0,0,0);return date;}}exports.YearParser=YearParser;","map":{"version":3,"names":["exports","YearParser","_Parser","require","_utils","Parser","constructor","arguments","priority","incompatibleTokens","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","mapValue","parseNDigits","ordinalNumber","unit","length","validate","_date","value","set","date","flags","currentYear","getFullYear","normalizedTwoDigitYear","normalizeTwoDigitYear","setFullYear","setHours","era"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/parse/_lib/parsers/YearParser.js"],"sourcesContent":["\"use strict\";\nexports.YearParser = void 0;\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends _Parser.Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(4, dateString),\n          valueCallback,\n        );\n      case \"yo\":\n        return (0, _utils.mapValue)(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(token.length, dateString),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\nexports.YearParser = YearParser;\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,UAAU,CAAG,IAAK,EAAC,CAC3B,GAAI,CAAAC,OAAO,CAAGC,OAAO,CAAC,cAAc,CAAC,CAErC,GAAI,CAAAC,MAAM,CAAGD,OAAO,CAAC,aAAa,CAAC,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAF,UAAU,QAAS,CAAAC,OAAO,CAACG,MAAO,CAAAC,YAAA,WAAAC,SAAA,OACtCC,QAAQ,CAAG,GAAG,MACdC,kBAAkB,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,EAEvEC,KAAKA,CAACC,UAAU,CAAEC,KAAK,CAAEC,KAAK,CAAE,CAC9B,KAAM,CAAAC,aAAa,CAAIC,IAAI,GAAM,CAC/BA,IAAI,CACJC,cAAc,CAAEJ,KAAK,GAAK,IAC5B,CAAC,CAAC,CAEF,OAAQA,KAAK,EACX,IAAK,GAAG,CACN,MAAO,CAAC,CAAC,CAAER,MAAM,CAACa,QAAQ,EACxB,CAAC,CAAC,CAAEb,MAAM,CAACc,YAAY,EAAE,CAAC,CAAEP,UAAU,CAAC,CACvCG,aACF,CAAC,CACH,IAAK,IAAI,CACP,MAAO,CAAC,CAAC,CAAEV,MAAM,CAACa,QAAQ,EACxBJ,KAAK,CAACM,aAAa,CAACR,UAAU,CAAE,CAC9BS,IAAI,CAAE,MACR,CAAC,CAAC,CACFN,aACF,CAAC,CACH,QACE,MAAO,CAAC,CAAC,CAAEV,MAAM,CAACa,QAAQ,EACxB,CAAC,CAAC,CAAEb,MAAM,CAACc,YAAY,EAAEN,KAAK,CAACS,MAAM,CAAEV,UAAU,CAAC,CAClDG,aACF,CAAC,CACL,CACF,CAEAQ,QAAQA,CAACC,KAAK,CAAEC,KAAK,CAAE,CACrB,MAAO,CAAAA,KAAK,CAACR,cAAc,EAAIQ,KAAK,CAACT,IAAI,CAAG,CAAC,CAC/C,CAEAU,GAAGA,CAACC,IAAI,CAAEC,KAAK,CAAEH,KAAK,CAAE,CACtB,KAAM,CAAAI,WAAW,CAAGF,IAAI,CAACG,WAAW,CAAC,CAAC,CAEtC,GAAIL,KAAK,CAACR,cAAc,CAAE,CACxB,KAAM,CAAAc,sBAAsB,CAAG,CAAC,CAAC,CAAE1B,MAAM,CAAC2B,qBAAqB,EAC7DP,KAAK,CAACT,IAAI,CACVa,WACF,CAAC,CACDF,IAAI,CAACM,WAAW,CAACF,sBAAsB,CAAE,CAAC,CAAE,CAAC,CAAC,CAC9CJ,IAAI,CAACO,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CACzB,MAAO,CAAAP,IAAI,CACb,CAEA,KAAM,CAAAX,IAAI,CACR,EAAE,KAAK,EAAI,CAAAY,KAAK,CAAC,EAAIA,KAAK,CAACO,GAAG,GAAK,CAAC,CAAGV,KAAK,CAACT,IAAI,CAAG,CAAC,CAAGS,KAAK,CAACT,IAAI,CACpEW,IAAI,CAACM,WAAW,CAACjB,IAAI,CAAE,CAAC,CAAE,CAAC,CAAC,CAC5BW,IAAI,CAACO,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CACzB,MAAO,CAAAP,IAAI,CACb,CACF,CACA1B,OAAO,CAACC,UAAU,CAAGA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}