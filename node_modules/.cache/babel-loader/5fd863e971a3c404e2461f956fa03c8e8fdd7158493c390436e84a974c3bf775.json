{"ast":null,"code":"\"use strict\";exports.toDate=toDate;/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */function toDate(argument){const argStr=Object.prototype.toString.call(argument);// Clone the date\nif(argument instanceof Date||typeof argument===\"object\"&&argStr===\"[object Date]\"){// Prevent the date to lose the milliseconds when passed to new Date() in IE10\nreturn new argument.constructor(+argument);}else if(typeof argument===\"number\"||argStr===\"[object Number]\"||typeof argument===\"string\"||argStr===\"[object String]\"){// TODO: Can we get rid of as?\nreturn new Date(argument);}else{// TODO: Can we get rid of as?\nreturn new Date(NaN);}}","map":{"version":3,"names":["exports","toDate","argument","argStr","Object","prototype","toString","call","Date","constructor","NaN"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/toDate.js"],"sourcesContent":["\"use strict\";\nexports.toDate = toDate;\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,MAAM,CAAGA,MAAM,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAA,MAAMA,CAACC,QAAQ,CAAE,CACxB,KAAM,CAAAC,MAAM,CAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACL,QAAQ,CAAC,CAEvD;AACA,GACEA,QAAQ,WAAY,CAAAM,IAAI,EACvB,MAAO,CAAAN,QAAQ,GAAK,QAAQ,EAAIC,MAAM,GAAK,eAAgB,CAC5D,CACA;AACA,MAAO,IAAI,CAAAD,QAAQ,CAACO,WAAW,CAAC,CAACP,QAAQ,CAAC,CAC5C,CAAC,IAAM,IACL,MAAO,CAAAA,QAAQ,GAAK,QAAQ,EAC5BC,MAAM,GAAK,iBAAiB,EAC5B,MAAO,CAAAD,QAAQ,GAAK,QAAQ,EAC5BC,MAAM,GAAK,iBAAiB,CAC5B,CACA;AACA,MAAO,IAAI,CAAAK,IAAI,CAACN,QAAQ,CAAC,CAC3B,CAAC,IAAM,CACL;AACA,MAAO,IAAI,CAAAM,IAAI,CAACE,GAAG,CAAC,CACtB,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}