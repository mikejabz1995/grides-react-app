{"ast":null,"code":"// src/components/Router.js\n\nimport axios from 'axios';\nconst Rentsyst = axios.create({\n  baseURL: 'https://api.rentsyst.com/'\n});\n\n// Function to fetch the auth token and get company settings\nexport const fetchAuthToken = async (client_id, client_secret) => {\n  try {\n    // Fetch auth token\n    const authResponse = await Rentsyst.post('oauth2/token', {\n      client_id,\n      client_secret,\n      grant_type: 'client_credentials'\n    });\n    const authToken = authResponse.data.access_token;\n\n    // Fetch company settings using the auth token\n    const settingsResponse = await Rentsyst.get('/v2/company/settings', {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n\n    // Return both auth token and company settings\n    return {\n      authToken,\n      companySettings: settingsResponse.data\n    };\n  } catch (error) {\n    console.error('Error fetching auth token or company settings:', error);\n    throw error;\n  }\n};\nconst RouterComponent = () => {\n  // Router component implementation...\n};\n_c = RouterComponent;\nexport default RouterComponent;\nvar _c;\n$RefreshReg$(_c, \"RouterComponent\");","map":{"version":3,"names":["axios","Rentsyst","create","baseURL","fetchAuthToken","client_id","client_secret","authResponse","post","grant_type","authToken","data","access_token","settingsResponse","get","headers","Authorization","companySettings","error","console","RouterComponent","_c","$RefreshReg$"],"sources":["/Users/mikejabrhamdan/grides-react-app/src/components/Router.js"],"sourcesContent":["// src/components/Router.js\n\nimport axios from 'axios';\n\nconst Rentsyst = axios.create({\n  baseURL: 'https://api.rentsyst.com/',\n});\n\n// Function to fetch the auth token and get company settings\nexport const fetchAuthToken = async (client_id, client_secret) => {\n  try {\n    // Fetch auth token\n    const authResponse = await Rentsyst.post('oauth2/token', {\n      client_id,\n      client_secret,\n      grant_type: 'client_credentials',\n    });\n    const authToken = authResponse.data.access_token;\n\n    // Fetch company settings using the auth token\n    const settingsResponse = await Rentsyst.get('/v2/company/settings', {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n      },\n    });\n\n    // Return both auth token and company settings\n    return { authToken, companySettings: settingsResponse.data };\n  } catch (error) {\n    console.error('Error fetching auth token or company settings:', error);\n    throw error;\n  }\n};\n\nconst RouterComponent = () => {\n  // Router component implementation...\n};\n\nexport default RouterComponent;\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,SAAS,EAAEC,aAAa,KAAK;EAChE,IAAI;IACF;IACA,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,cAAc,EAAE;MACvDH,SAAS;MACTC,aAAa;MACbG,UAAU,EAAE;IACd,CAAC,CAAC;IACF,MAAMC,SAAS,GAAGH,YAAY,CAACI,IAAI,CAACC,YAAY;;IAEhD;IACA,MAAMC,gBAAgB,GAAG,MAAMZ,QAAQ,CAACa,GAAG,CAAC,sBAAsB,EAAE;MAClEC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,SAAU;MACrC;IACF,CAAC,CAAC;;IAEF;IACA,OAAO;MAAEA,SAAS;MAAEO,eAAe,EAAEJ,gBAAgB,CAACF;IAAK,CAAC;EAC9D,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IACtE,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAME,eAAe,GAAGA,CAAA,KAAM;EAC5B;AAAA,CACD;AAACC,EAAA,GAFID,eAAe;AAIrB,eAAeA,eAAe;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}