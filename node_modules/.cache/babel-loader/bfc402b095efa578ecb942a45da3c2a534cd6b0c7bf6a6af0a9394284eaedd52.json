{"ast":null,"code":"\"use strict\";exports.getISOWeek=getISOWeek;var _index=require(\"./constants.js\");var _index2=require(\"./startOfISOWeek.js\");var _index3=require(\"./startOfISOWeekYear.js\");var _index4=require(\"./toDate.js\");/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */function getISOWeek(date){const _date=(0,_index4.toDate)(date);const diff=+(0,_index2.startOfISOWeek)(_date)-+(0,_index3.startOfISOWeekYear)(_date);// Round the number of weeks to the nearest integer because the number of\n// milliseconds in a week is not constant (e.g. it's different in the week of\n// the daylight saving time clock shift).\nreturn Math.round(diff/_index.millisecondsInWeek)+1;}","map":{"version":3,"names":["exports","getISOWeek","_index","require","_index2","_index3","_index4","date","_date","toDate","diff","startOfISOWeek","startOfISOWeekYear","Math","round","millisecondsInWeek"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/getISOWeek.js"],"sourcesContent":["\"use strict\";\nexports.getISOWeek = getISOWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./startOfISOWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek(date) {\n  const _date = (0, _index4.toDate)(date);\n  const diff =\n    +(0, _index2.startOfISOWeek)(_date) -\n    +(0, _index3.startOfISOWeekYear)(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,UAAU,CAAGA,UAAU,CAC/B,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,gBAAgB,CAAC,CACtC,GAAI,CAAAC,OAAO,CAAGD,OAAO,CAAC,qBAAqB,CAAC,CAC5C,GAAI,CAAAE,OAAO,CAAGF,OAAO,CAAC,yBAAyB,CAAC,CAChD,GAAI,CAAAG,OAAO,CAAGH,OAAO,CAAC,aAAa,CAAC,CAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,UAAUA,CAACM,IAAI,CAAE,CACxB,KAAM,CAAAC,KAAK,CAAG,CAAC,CAAC,CAAEF,OAAO,CAACG,MAAM,EAAEF,IAAI,CAAC,CACvC,KAAM,CAAAG,IAAI,CACR,CAAC,CAAC,CAAC,CAAEN,OAAO,CAACO,cAAc,EAAEH,KAAK,CAAC,CACnC,CAAC,CAAC,CAAC,CAAEH,OAAO,CAACO,kBAAkB,EAAEJ,KAAK,CAAC,CAEzC;AACA;AACA;AACA,MAAO,CAAAK,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAGR,MAAM,CAACa,kBAAkB,CAAC,CAAG,CAAC,CACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}