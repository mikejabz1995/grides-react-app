{"ast":null,"code":"function isAbsolute(pathname){return pathname.charAt(0)==='/';}// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list,index){for(var i=index,k=i+1,n=list.length;k<n;i+=1,k+=1){list[i]=list[k];}list.pop();}// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to,from){if(from===undefined)from='';var toParts=to&&to.split('/')||[];var fromParts=from&&from.split('/')||[];var isToAbs=to&&isAbsolute(to);var isFromAbs=from&&isAbsolute(from);var mustEndAbs=isToAbs||isFromAbs;if(to&&isAbsolute(to)){// to is absolute\nfromParts=toParts;}else if(toParts.length){// to is relative, drop the filename\nfromParts.pop();fromParts=fromParts.concat(toParts);}if(!fromParts.length)return'/';var hasTrailingSlash;if(fromParts.length){var last=fromParts[fromParts.length-1];hasTrailingSlash=last==='.'||last==='..'||last==='';}else{hasTrailingSlash=false;}var up=0;for(var i=fromParts.length;i>=0;i--){var part=fromParts[i];if(part==='.'){spliceOne(fromParts,i);}else if(part==='..'){spliceOne(fromParts,i);up++;}else if(up){spliceOne(fromParts,i);up--;}}if(!mustEndAbs)for(;up--;up)fromParts.unshift('..');if(mustEndAbs&&fromParts[0]!==''&&(!fromParts[0]||!isAbsolute(fromParts[0])))fromParts.unshift('');var result=fromParts.join('/');if(hasTrailingSlash&&result.substr(-1)!=='/')result+='/';return result;}export default resolvePathname;","map":{"version":3,"names":["isAbsolute","pathname","charAt","spliceOne","list","index","i","k","n","length","pop","resolvePathname","to","from","undefined","toParts","split","fromParts","isToAbs","isFromAbs","mustEndAbs","concat","hasTrailingSlash","last","up","part","unshift","result","join","substr"],"sources":["/Users/mikejabrhamdan/grides-react-app/src/node_modules/resolve-pathname/esm/resolve-pathname.js"],"sourcesContent":["function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n\n  var toParts = (to && to.split('/')) || [];\n  var fromParts = (from && from.split('/')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== '' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nexport default resolvePathname;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}