{"ast":null,"code":"\"use strict\";exports.getWeek=getWeek;var _index=require(\"./constants.js\");var _index2=require(\"./startOfWeek.js\");var _index3=require(\"./startOfWeekYear.js\");var _index4=require(\"./toDate.js\");/**\n * The {@link getWeek} function options.\n */ /**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */function getWeek(date,options){const _date=(0,_index4.toDate)(date);const diff=+(0,_index2.startOfWeek)(_date,options)-+(0,_index3.startOfWeekYear)(_date,options);// Round the number of weeks to the nearest integer because the number of\n// milliseconds in a week is not constant (e.g. it's different in the week of\n// the daylight saving time clock shift).\nreturn Math.round(diff/_index.millisecondsInWeek)+1;}","map":{"version":3,"names":["exports","getWeek","_index","require","_index2","_index3","_index4","date","options","_date","toDate","diff","startOfWeek","startOfWeekYear","Math","round","millisecondsInWeek"],"sources":["/Users/mikejabrhamdan/Downloads/grides-react-app-rename/src/node_modules/date-fns/getWeek.js"],"sourcesContent":["\"use strict\";\nexports.getWeek = getWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./startOfWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nfunction getWeek(date, options) {\n  const _date = (0, _index4.toDate)(date);\n  const diff =\n    +(0, _index2.startOfWeek)(_date, options) -\n    +(0, _index3.startOfWeekYear)(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}\n"],"mappings":"AAAA,YAAY,CACZA,OAAO,CAACC,OAAO,CAAGA,OAAO,CACzB,GAAI,CAAAC,MAAM,CAAGC,OAAO,CAAC,gBAAgB,CAAC,CACtC,GAAI,CAAAC,OAAO,CAAGD,OAAO,CAAC,kBAAkB,CAAC,CACzC,GAAI,CAAAE,OAAO,CAAGF,OAAO,CAAC,sBAAsB,CAAC,CAC7C,GAAI,CAAAG,OAAO,CAAGH,OAAO,CAAC,aAAa,CAAC,CAEpC;AACA;AACA,GAFA,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAAS,CAAAF,OAAOA,CAACM,IAAI,CAAEC,OAAO,CAAE,CAC9B,KAAM,CAAAC,KAAK,CAAG,CAAC,CAAC,CAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC,CACvC,KAAM,CAAAI,IAAI,CACR,CAAC,CAAC,CAAC,CAAEP,OAAO,CAACQ,WAAW,EAAEH,KAAK,CAAED,OAAO,CAAC,CACzC,CAAC,CAAC,CAAC,CAAEH,OAAO,CAACQ,eAAe,EAAEJ,KAAK,CAAED,OAAO,CAAC,CAE/C;AACA;AACA;AACA,MAAO,CAAAM,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAGT,MAAM,CAACc,kBAAkB,CAAC,CAAG,CAAC,CACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}